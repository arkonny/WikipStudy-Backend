type User {
  id: ID!
  user_name: String!
  email: String! @constraint(format: "email")
}

type UserOutput {
  id: ID!
  user_name: String!
}

type LoginResponse {
  token: String
  message: String!
  user: User!
}

type UserResponse {
  message: String!
  user: User!
}

input Credentials {
  username: String! @constraint(format: "email", minLength: 5, maxLength: 255)
  password: String! @constraint(minLength: 4, maxLength: 255)
}

input UserInput {
  user_name: String! @constraint(minLength: 3, maxLength: 20)
  email: String! @constraint(format: "email", minLength: 5, maxLength: 255)
  password: String! @constraint(minLength: 4, maxLength: 255)
}

input UserModify {
  user_name: String @constraint(minLength: 3, maxLength: 20)
  email: String @constraint(format: "email", minLength: 5, maxLength: 255)
  password: String @constraint(minLength: 4, maxLength: 255)
}

type Query {
  userById(id: ID!): UserOutput
  checkToken: UserResponse
}

type Mutation {
  login(credentials: Credentials!): LoginResponse
  register(user: UserInput!): UserResponse
  updateUser(user: UserModify!): UserResponse
  deleteUser: UserResponse
}
