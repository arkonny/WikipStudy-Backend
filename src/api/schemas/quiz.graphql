type Quiz {
  id: ID!
  quiz_name: String!
  questions: [Question!]!
  owner: UserOutput!
  filename: String
}

type QuizOut {
  id: ID!
  quiz_name: String!
  questions: [Question!]!
  owner: UserOutput!
  filename: String
  favorite: Boolean!
}

type Question {
  id: ID!
  question: String!
  type: String
  options: [String]
  answers: [String!]!
}

type QuizCard {
  id: ID!
  quiz_name: String!
  filename: String
}

type Query {
  quizById(id: ID!): QuizOut
  quizResearch(search: String!): [QuizCard]
  quizzes: [QuizCard]
  quizzesByOwner(owner: ID!): [QuizCard]
}

input QuizInput {
  quiz_name: String! @constraint(minLength: 3, maxLength: 50)
  filename: String @constraint(minLength: 3, maxLength: 50)
  questions: [QuestionInput]!
}

input QuestionInput {
  question: String!
  type: String @constraint(pattern: "^(multiple|single)$")
  options: [String]
  answers: [String]!
}

type Mutation {
  createQuiz(input: QuizInput!): Quiz
  updateQuiz(id: ID!, input: QuizInput!): Quiz
  generateQuiz(search: String!): Quiz
  deleteQuiz(id: ID!): Quiz
}
